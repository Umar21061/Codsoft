Question:
Build a model that predicts the rating of a movie based on
features like genre, director, and actors. You can use regression
techniques to tackle this problem.
The goal is to analyze historical movie data and develop a model
that accurately estimates the rating given to a movie by users or
critics.
Movie Rating Prediction project enables you to explore data
analysis, preprocessing, feature engineering, and machine
learning modeling techniques. It provides insights into the factors
that influence movie ratings and allows you to build a model that
can estimate the ratings of movies accurately
 Explain code 
The provided Python code is designed to predict movie ratings based on features such as
'Year', 'Votes', and 'Duration' using linear regression. The script loads a dataset containing 
movie information, handles missing values, and preprocesses relevant columns. It then splits
the data into training and testing sets, builds a linear regression model, evaluates its performance,
and visualizes the predicted ratings against the actual ratings. Lastly, the model is used to make
predictions for a new set of movie features.
Code :
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

data = pd.read_csv('Desktop\IMDb Movies India.csv', encoding='latin1')
print(data.head())
print(data.info())


data = data.dropna(subset=['Rating']) 

data['Year'] = data['Year'].str.extract('(\d+)').astype(float)


data['Votes'] = pd.to_numeric(data['Votes'], errors='coerce')


data['Duration'] = pd.to_numeric(data['Duration'].str.extract('(\d+)'), errors='coerce')

data = data.dropna(subset=['Votes', 'Duration'])


features = ['Year', 'Votes', 'Duration']
X = data[features]
y = data['Rating']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')


plt.scatter(y_test, y_pred)
plt.xlabel('Actual Ratings')
plt.ylabel('Predicted Ratings')
plt.title('Actual vs Predicted Ratings')
plt.show()


new_data = pd.DataFrame({'Year': [actual_value], 'Votes': [actual_value], 'Duration': [actual_value]})
prediction = model.predict(new_data)
print(f'Predicted Rating: {prediction}')
